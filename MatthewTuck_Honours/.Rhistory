"Balaenoptera musculus",
"Balaenoptera omurai",
"Balaenoptera physalus",
"Balaenoptera ricei",
"Berardius arnuxii",
"Berardius bairdii",
"Berardius minimus",
"Caperea marginata",
"Cephalorhynchus commersonii",
"Cephalorhynchus eutropia",
"Cephalorhynchus heavisidii",
"Cephalorhynchus hectori",
"Delphinapterus leucas",
"Delphinus delphis",
"Eschrichtius robustus",
"Eubalaena australis",
"Eubalaena glacialis",
"Eubalaena japonica",
"Feresa attenuata",
"Globicephala macrorhynchus",
"Globicephala melas",
"Grampus griseus",
"Hyperoodon ampullatus",
"Hyperoodon planifrons",
"Indopacetus pacificus",
"Kogia breviceps",
"Kogia sima",
"Lagenodelphis hosei",
"Lagenorhynchus acutus",
"Lagenorhynchus albirostris",
"Lagenorhynchus australis",
"Lagenorhynchus cruciger",
"Lagenorhynchus obscurus",
"Lissodelphis borealis",
"Lissodelphis peronii",
"Megaptera novaeangliae",
"Mesoplodon bidens",
"Mesoplodon bowdoini",
"Mesoplodon carlhubbsi",
"Mesoplodon densirostris",
"Mesoplodon eueu",
"Mesoplodon europaeus",
"Mesoplodon ginkgodens",
"Mesoplodon grayi",
"Mesoplodon hectori",
"Mesoplodon hotaula",
"Mesoplodon layardii",
"Mesoplodon mirus",
"Mesoplodon perrini",
"Mesoplodon peruvianus",
"Mesoplodon stejnegeri",
"Mesoplodon traversii",
"Monodon monoceros",
"Neophocaena asiaeorientalis",
"Neophocaena phocaenoides",
"Orcaella brevirostris",
"Orcaella heinsohni",
"Orcinus orca",
"Peponocephala electra",
"Phocoena dioptrica",
"Phocoena phocoena",
"Phocoena sinus",
"Phocoena spinipinnis",
"Phocoenoides dalli",
"Physeter macrocephalus",
"Pontoporia blainvillei",
"Pseudorca crassidens",
"Sagmatias obliquidens",
"Sotalia guianensis",
"Sousa chinensis",
"Sousa plumbea",
"Sousa sahulensis",
"Sousa teuszii",
"Stenella attenuata",
"Stenella clymene",
"Stenella coeruleoalba",
"Stenella frontalis",
"Stenella longirostris",
"Steno bredanensis",
"Tasmacetus shepherdi",
"Tursiops aduncus",
"Tursiops truncatus",
"Ziphius cavirostris")
fb_tbl("species") %>%
mutate(sci_name = paste(Genus, Species)) %>%
filter(sci_name %in% cetaceans) %>%
select(sci_name, FBname, morphology,length_length, ecology, ecosystem, diet)
fb_tbl("species", "sealifebase") %>%
mutate(sci_name = paste(Genus, Species)) %>%
filter(sci_name %in% cetaceans) %>%
select(sci_name, FBname, morphology,length_length, ecology, ecosystem, diet)
rlang::last_trace()
fb_tbl("species", "ecology", "ecosystem","diet", "morphology") %>%
mutate(sci_name = paste(Genus, Species)) %>%
filter(sci_name %in% cetaceans) %>%
select(sci_name, FBname,length_length, ecology, ecosystem, diet)
fb_tbl("species", "ecology", "ecosystem","diet", "morphology", "sealifebase") %>%
mutate(sci_name = paste(Genus, Species)) %>%
filter(sci_name %in% cetaceans) %>%
select(sci_name, FBname,length_length, ecology, ecosystem, diet)
fb_tbl("species", "ecology", "ecosystem","diet", "morphology", "sealifebase") %>%
mutate(sci_name = paste(Genus, Species)) %>%
filter(sci_name %in% cetaceans) %>%
select(sci_name, FBname,length_length, ecology, ecosystem, diet)
fb_tbl("species, ecology, ecosystem, diet, morphology", "sealifebase") %>%
mutate(sci_name = paste(Genus, Species)) %>%
filter(sci_name %in% cetaceans) %>%
select(sci_name, FBname,length_length, ecology, ecosystem, diet)
fb_tbl("species", "sealifebase") %>%
mutate(sci_name = paste(Genus, Species)) %>%
filter(sci_name %in% cetaceans) %>%
select(sci_name, FBname)
fb_tables("sealifebase")
fb_tbl("species", "sealifebase") %>%
filter(sci_name %in% cetaceans) %>%
fb_tbl("species", "sealifebase") %>%
species_list<-fb_tbl("species", "sealifebase")%>%
version = "latest"%>%
db = NULL%>%
collect = TRUE
species_list<-fb_tbl("species", "sealifebase")%>%
version = "latest"%>%
db = NULL%>%
species_list<-fb_tbl("species", "sealifebase")
setwd("C:/Users/rugby/Downloads/Joan's code example")
install.packages("mFD")
setwd("C:/Users/rugby/Downloads/Joan's code example")
install.packages("mFD")
setwd("C:/Users/rugby/Downloads/Joan's code example")
install.packages("mFD")
install.packages("vegan")
install.packages("betapart")
install.packages("picante")
install.packages("abind")
# Load R packages
library("mFD") # functional trait analyses
library("vegan") # species diversity analyses
library("betapart") # functional B-diversity
library("picante") # null models
library("abind") # arrays
sfDVent_sp <- read.csv("sfDVent_sp_JA.csv") # Import sfDVent_sp_JA.csv dataset
sp_comm <- as.data.frame(t(sfDVent_sp[,c(7:23)])) # species occurrences data
View(sp_comm)
sp_traits <- sfDVent_sp[,c(1:6)] # species traits data
View(sp_traits)
View(sp_comm)
sp_comm <- as.data.frame(t(sfDVent_sp[,c(8:23)])) # species occurrences data
sp_traits <- sfDVent_sp[,c(1:7)] # species traits data
View(sp_comm)
View(sp_traits)
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("O","O","N","O","O","N")) # Trait info data
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("N","O","O","N","O","O","N")) # Trait info data
View(trait_info)
sp_traits$Relative.Adult.Mobility <- as.ordered(sp_traits$Relative.Adult.Mobility) # Mobility as an ordered trait
sp_traits$Estimated.Max.Body.Size <- as.ordered(sp_traits$Estimated.Max.Body.Size) # Size as an ordered trait
sp_traits$Habitat.Complexity <- as.factor(sp_traits$Habitat.Complexity) # Habitat Complexity as a factor trait
sp_traits$Chemosynthesis.Obligate <- as.ordered(sp_traits$Chemosynthesis.Obligate) # Chemo Obligate as an ordered trait
sp_traits$Zonation.From.Vent <- ordered(sp_traits$Zonation.From.Vent, levels = c("Low", "Medium", "High")) # Zonation as an ordered trait and reorder levels
sp_traits$Feeding.Mode <- as.factor(sp_traits$Feeding.Mode) # Feeding as a factor trait
sp_dist <- betadiver(sp_comm, method = "sim") # Sorensen dissimilarity of species
sp_comm_hc <- hclust(sp_dist, method = "average") # Cluster analysis using the algorithm
View(sp_comm_hc)
plot(sp_comm_hc, hang = -1, main = "Vent biogeographical regions", ylab= "", xlab= "") # Plot dendogram
abline(v = 0, h = 0.75, col ="red", lty = 2) # Dissimilarity threshold set at 75
points(x = c(1:17), y = rep(0,17), pch = 19, cex = 1.5,
col = c("#b989f0","#FFA500","#753232", "#753232", "#CD2626","#CD2626","#CD2626",
"#c95fa4", "#3acd88", "#3A5FCD", "#3A5FCD", "#d1cb54","#242323", "#54cfd1",
"#03520c", "#03520c","#03520c")) # Add point and color to highlight different vent biogeoprovinces
# Regroup by region
prov <- c("IndR", "ESR", "EPR", "GoC", "JdF", "Kerm", "SWP", "SWP","Izu-Mar",
"MohR", "EPR", "MAR", "SWP", "Okin", "EPR", "MAR", "IndR") # to add as column for re-classification of vents
sp_comm$Province <- prov # add column province
sp_comm <- as.data.frame(t(sfDVent_sp[,c(7:23)])) # species occurrences data
sp_traits <- sfDVent_sp[,c(1:7)] # species traits data
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("N","O","O","N","O","O","N")) # Trait info data
sp_traits$Relative.Adult.Mobility <- as.ordered(sp_traits$Relative.Adult.Mobility) # Mobility as an ordered trait
sp_traits$Estimated.Max.Body.Size <- as.ordered(sp_traits$Estimated.Max.Body.Size) # Size as an ordered trait
sp_traits$Habitat.Complexity <- as.factor(sp_traits$Habitat.Complexity) # Habitat Complexity as a factor trait
sp_traits$Chemosynthesis.Obligate <- as.ordered(sp_traits$Chemosynthesis.Obligate) # Chemo Obligate as an ordered trait
sp_traits$Zonation.From.Vent <- ordered(sp_traits$Zonation.From.Vent, levels = c("Low", "Medium", "High")) # Zonation as an ordered trait and reorder levels
sp_traits$Feeding.Mode <- as.factor(sp_traits$Feeding.Mode) # Feeding as a factor trait
sp_dist <- betadiver(sp_comm, method = "sim") # Sorensen dissimilarity of species
sp_comm_hc <- hclust(sp_dist, method = "average") # Cluster analysis using the algorithm
plot(sp_comm_hc, hang = -1, main = "Vent biogeographical regions", ylab= "", xlab= "") # Plot dendogram
sp_comm <- as.data.frame(t(sfDVent_sp[,c(8:23)])) # species occurrences data
sp_traits <- sfDVent_sp[,c(1:7)] # species traits data
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("N","O","O","N","O","O","N")) # Trait info data
sp_traits$Relative.Adult.Mobility <- as.ordered(sp_traits$Relative.Adult.Mobility) # Mobility as an ordered trait
sp_traits$Estimated.Max.Body.Size <- as.ordered(sp_traits$Estimated.Max.Body.Size) # Size as an ordered trait
sp_traits$Habitat.Complexity <- as.factor(sp_traits$Habitat.Complexity) # Habitat Complexity as a factor trait
sp_traits$Chemosynthesis.Obligate <- as.ordered(sp_traits$Chemosynthesis.Obligate) # Chemo Obligate as an ordered trait
sp_traits$Zonation.From.Vent <- ordered(sp_traits$Zonation.From.Vent, levels = c("Low", "Medium", "High")) # Zonation as an ordered trait and reorder levels
sp_traits$Feeding.Mode <- as.factor(sp_traits$Feeding.Mode) # Feeding as a factor trait
sp_dist <- betadiver(sp_comm, method = "sim") # Sorensen dissimilarity of species
sp_comm_hc <- hclust(sp_dist, method = "average") # Cluster analysis using the algorithm
plot(sp_comm_hc, hang = -1, main = "Vent biogeographical regions", ylab= "", xlab= "") # Plot dendogram
plot(sp_comm_hc, hang = -1, main = "Vent biogeographical regions", ylab= "", xlab= "") # Plot dendogram
abline(v = 0, h = 0.75, col ="red", lty = 2) # Dissimilarity threshold set at 75
points(x = c(1:17), y = rep(0,17), pch = 19, cex = 1.5,
col = c("#b989f0","#FFA500","#753232", "#753232", "#CD2626","#CD2626","#CD2626",
"#c95fa4", "#3acd88", "#3A5FCD", "#3A5FCD", "#d1cb54","#242323", "#54cfd1",
"#03520c", "#03520c","#03520c")) # Add point and color to highlight different vent biogeoprovinces
sp_comm <- as.data.frame(t(sfDVent_sp[,c(8:24)])) # species occurrences data
sp_traits <- sfDVent_sp[,c(1:7)] # species traits data
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("N","O","O","N","O","O","N")) # Trait info data
sp_traits$Relative.Adult.Mobility <- as.ordered(sp_traits$Relative.Adult.Mobility) # Mobility as an ordered trait
sp_traits$Estimated.Max.Body.Size <- as.ordered(sp_traits$Estimated.Max.Body.Size) # Size as an ordered trait
sp_traits$Habitat.Complexity <- as.factor(sp_traits$Habitat.Complexity) # Habitat Complexity as a factor trait
sp_traits$Chemosynthesis.Obligate <- as.ordered(sp_traits$Chemosynthesis.Obligate) # Chemo Obligate as an ordered trait
sp_traits$Zonation.From.Vent <- ordered(sp_traits$Zonation.From.Vent, levels = c("Low", "Medium", "High")) # Zonation as an ordered trait and reorder levels
sp_traits$Feeding.Mode <- as.factor(sp_traits$Feeding.Mode) # Feeding as a factor trait
sp_dist <- betadiver(sp_comm, method = "sim") # Sorensen dissimilarity of species
sp_comm_hc <- hclust(sp_dist, method = "average") # Cluster analysis using the algorithm
plot(sp_comm_hc, hang = -1, main = "Vent biogeographical regions", ylab= "", xlab= "") # Plot dendogram
sp_comm$Province <- prov # add column province
sp_comm_biog = sapply(sp_comm[-512], tapply, INDEX = sp_comm$Province, sum) # create new table with species classified in bioprovinces
sp_comm <- sp_comm[,-512] # delete column of provinces
View(sp_comm)
View(sp_comm_biog)
sp_comm_biog <- decostand(sp_comm_biog, "pa") # presence/abscense transformation (1/0)
View(sp_comm_biog)
# Functional distance between species
func_dist_sp <- funct.dist(sp_traits,
tr_cat = trait_info,
metric = "gower",
ordinal_var = "metric",
weight_type = "equal") # Functional dissimilarity (Gower) distance between species
help("funct.dist")
View(trait_info)
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c(,"O","O","N","O","O","N")) # Trait info data
help(trait_type)
help("data.frame")
sp_comm <- as.data.frame(t(sfDVent_sp[,c(8:24)])) # species occurrences data
sp_traits <- sfDVent_sp[,c(2:7)] # species traits data
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("O","O","N","O","O","N")) # Trait info data
sp_traits$Relative.Adult.Mobility <- as.ordered(sp_traits$Relative.Adult.Mobility) # Mobility as an ordered trait
sp_traits$Estimated.Max.Body.Size <- as.ordered(sp_traits$Estimated.Max.Body.Size) # Size as an ordered trait
sp_traits$Habitat.Complexity <- as.factor(sp_traits$Habitat.Complexity) # Habitat Complexity as a factor trait
sp_traits$Chemosynthesis.Obligate <- as.ordered(sp_traits$Chemosynthesis.Obligate) # Chemo Obligate as an ordered trait
sp_traits$Zonation.From.Vent <- ordered(sp_traits$Zonation.From.Vent, levels = c("Low", "Medium", "High")) # Zonation as an ordered trait and reorder levels
sp_traits$Feeding.Mode <- as.factor(sp_traits$Feeding.Mode) # Feeding as a factor trait
sp_dist <- betadiver(sp_comm, method = "sim") # Sorensen dissimilarity of species
sp_comm_hc <- hclust(sp_dist, method = "average") # Cluster analysis using the algorithm
plot(sp_comm_hc, hang = -1, main = "Vent biogeographical regions", ylab= "", xlab= "") # Plot dendogram
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("NULL","O","O","N","O","O","N")) # Trait info data
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("N","O","O","N","O","O","N")) # Trait info data
sp_traits <- sfDVent_sp[,c(1:7)] # species traits data
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("N","O","O","N","O","O","N")) # Trait info data
sp_traits$Relative.Adult.Mobility <- as.ordered(sp_traits$Relative.Adult.Mobility) # Mobility as an ordered trait
sp_traits$Estimated.Max.Body.Size <- as.ordered(sp_traits$Estimated.Max.Body.Size) # Size as an ordered trait
sp_traits$Habitat.Complexity <- as.factor(sp_traits$Habitat.Complexity) # Habitat Complexity as a factor trait
sp_traits$Chemosynthesis.Obligate <- as.ordered(sp_traits$Chemosynthesis.Obligate) # Chemo Obligate as an ordered trait
sp_traits$Zonation.From.Vent <- ordered(sp_traits$Zonation.From.Vent, levels = c("Low", "Medium", "High")) # Zonation as an ordered trait and reorder levels
sp_traits$Feeding.Mode <- as.factor(sp_traits$Feeding.Mode) # Feeding as a factor trait
sp_dist <- betadiver(sp_comm, method = "sim") # Sorensen dissimilarity of species
sp_comm_hc <- hclust(sp_dist, method = "average") # Cluster analysis using the algorithm
plot(sp_comm_hc, hang = -1, main = "Vent biogeographical regions", ylab= "", xlab= "") # Plot dendogram
abline(v = 0, h = 0.75, col ="red", lty = 2) # Dissimilarity threshold set at 75
points(x = c(1:17), y = rep(0,17), pch = 19, cex = 1.5,
col = c("#b989f0","#FFA500","#753232", "#753232", "#CD2626","#CD2626","#CD2626",
"#c95fa4", "#3acd88", "#3A5FCD", "#3A5FCD", "#d1cb54","#242323", "#54cfd1",
"#03520c", "#03520c","#03520c")) # Add point and color to highlight different vent biogeoprovinces
# Regroup by region
prov <- c("IndR", "ESR", "EPR", "GoC", "JdF", "Kerm", "SWP", "SWP","Izu-Mar",
"MohR", "EPR", "MAR", "SWP", "Okin", "EPR", "MAR", "IndR") # to add as column for re-classification of vents
sp_comm$Province <- prov # add column province
sp_comm_biog = sapply(sp_comm[-512], tapply, INDEX = sp_comm$Province, sum) # create new table with species classified in bioprovinces
sp_comm <- sp_comm[,-512] # delete column of provinces
sp_comm_biog <- decostand(sp_comm_biog, "pa") # presence/abscense transformation (1/0)
# Functional distance between species
func_dist_sp <- funct.dist(sp_traits,
tr_cat = trait_info,
metric = "gower",
ordinal_var = "metric",
weight_type = "equal") # Functional dissimilarity (Gower) distance between species
help("funct.dist")
sp_traits$Species<-as.factor(sp_traits$Species)
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("N","O","O","N","O","O","N")) # Trait info data
# Functional distance between species
func_dist_sp <- funct.dist(sp_traits,
tr_cat = trait_info,
metric = "gower",
ordinal_var = "metric",
weight_type = "equal") # Functional dissimilarity (Gower) distance between species
sfDVent_sp <- read.csv() # Import sfDVent_sp_JA.csv dataset
sp_comm <- as.data.frame(t(sfDVent_sp[,c(8:24)])) # species occurrences data
sp_traits <- sfDVent_sp[,c(1:7)] # species traits data
trait_info <- data.frame(trait_name = colnames(sp_traits), trait_type = c("O","O","O","N","O","O","N")) # Trait info data
sfDVent_sp <- read.csv(sfDVent_sp_JA.csv) # Import sfDVent_sp_JA.csv dataset
setwd("C:/Users/rugby/Downloads/Joan's code example")
sfDVent_sp <- read.csv(sfDVent_sp_JA.csv) # Import sfDVent_sp_JA.csv dataset
setwd("C:/Users/rugby/Downloads/Joan's code example")
sfDVent_sp <- read.csv(sfDVent_sp_JA.csv) # Import sfDVent_sp_JA.csv dataset
sfDVent_sp <- read.csv(sfDVent_sp_JA.csv) # Import sfDVent_sp_JA.csv dataset
setwd("~/GitHub/Matthew-Tuck-honours/MatthewTuck_Honours/clean_data")
#### Load R packages ####
library("mFD") # functional trait analyses
library("vegan") # species diversity analyses
library("betapart") # functional B-diversity
library("picante") # null models
library("abind") # arrays
cetacean_dataset<- read.csv("mtuck_honours_Rdocument.csv") # Import cleaned csv dataset for Cetacean functional diversity
sp_comm <- as.data.frame(cetacean_dataset[,c(19:20)], row.names=cetacean_dataset$species_name)# species occurrence data for PCEEZ region
sp_traits <- as.data.frame(cetacean_dataset[,c(3:10)], row.names = cetacean_dataset$species_name)# species level trait data
trait_info <- data.frame(trait_name = colnames(sp_traits[,c(1:8)]), trait_type = c("O","O","O","N","N","O","O","N"))# trait information dataframe
sp_traits$max_length_m <- ordered(sp_traits$max_length_m, levels=c("A", "B"))
sp_traits$max_mass_kg <- ordered(sp_traits$max_mass_kg, levels=c("A","B","C","D"))
sp_traits$max_mass_max_length_ratio <- ordered(sp_traits$max_mass_max_length_ratio, levels=c("A", "B", "C"))
sp_traits$dentition <- as.factor(sp_traits$dentition)
sp_traits$migratory_behaviour <- as.factor(sp_traits$migratory_behaviour)
sp_traits$max_diving_depth <- ordered(sp_traits$max_diving_depth, levels=c("A", "B", "C", "D"))
sp_traits$group_size <- ordered(sp_traits$group_size, levels = c("A", "B", "C", "D", "E", "F"))
sp_traits$prey_choice <- as.factor(sp_traits$prey_choice) #setting up species traits as ordinal and nominal variables
#### Establishing Gower's Functional Distance between species ####
func_dist_sp <- funct.dist(sp_traits,
tr_cat = trait_info,
metric = "gower",
ordinal_var = "metric",
weight_type = "equal") # computes the functional dissimilarity (Gower) distance between species
#### PCoA construction ####
func_qual <- quality.fspaces(func_dist_sp,
deviation_weighting = c("absolute", "squared"),
maxdim_pcoa = 9,
fdist_scaling = c(TRUE, FALSE)) # estimating the quality of the functional space
View(func_qual)
apply(func_qual$quality_fspaces, 2, which.min) # best number of dimesions calculated with MAD index (4D) (Maire et al. 2015)
sp_faxes <- func_qual$details_fspaces$sp_pc_coord # species coordinates in the functional space
sp_comm_biog = as.matrix(sp_comm) # creating a matrix from the occurrence data
sp_comm_biog <- decostand(sp_comm_biog, "pa") # presence/abscense transformation (1/0)
sp_comm_biog<-(t(sp_comm_biog)) #transposing the matrix for use in the alpha.fd.multidim function
####Calculation of PCEEZ Functional Dispersion (and other indices)####
func_ind_sp <- alpha.fd.multidim(sp_faxes_coord = sp_faxes[,c(1:4)],
asb_sp_w = sp_comm_biog,
scaling = TRUE,
details_returned = T,
verbose = T) # mutidimensinal functional diversity indices in a 4D functional space
func_ind_fdis <- func_ind_sp$functional_diversity_indices$fdis # functional dispersion calculation for PCEEZ
#### Unique Trait Combinations ####
func_ent <- sp.to.fe(sp_traits, trait_info, fe_nm_type = "fe_rank") # compute UTC
func_ind_fe <- alpha.fd.fe(sp_comm_biog, sp_to_fe = func_ent) # compute UTC derived indices
View(func_ind_fe$asb_fdfe) # UTC Functional indexes
library(funrar)
sp_traits_unique<-as.matrix(func_dist_sp) #setting the functional dissimilarity data as a matrix
unique_sp<-funrar(pres_matrix = sp_comm_biog, dist_matrix = sp_traits_unique, rel_abund = FALSE) #calculating the number of unique trait assemblages in the data set
uniqueness<-uniqueness(sp_comm_biog, sp_traits_unique) #calculating "uniqueness" for each species in the data set
colSums(uniqueness==0) ## 44 species identified which had uniqueness=0, which means they shared trait assemblage with at least one other species
View(uniqueness)
#### NULL Distribution Setup ####
n_perm = 1000 # number of permutations
multif_perm <- as.list(rep(NA, n_perm)) # list to save permutations results of multidimensional functional alpha-diversity indices (FDis)
sp_perm<-sp_comm_biog[c(1),]
View(sp_perm)
for(i in seq(n_perm)){
sp_comm_n = randomizeMatrix(sp_comm_biog, null.model = "richness") # Randomizations maintaining species richness in the PCEEZ
multif_n <- alpha.fd.multidim(sp_faxes_coord = sp_faxes[,c(1:4)],
asb_sp_w = sp_comm_n,
ind_vect= "fdis",
scaling = T,
details_returned = T,
verbose = F) #  Null Distribution for FDis
multif_perm[[i]] <- multif_n$functional_diversity_indices["fdis"] }# store null FDis results
#### Wrap Null Distribution Results ####
multif_perm_a <- array(NA, dim = c(2,1,0)) # create an array with 1 col & 2 rows for null FDis results
for (i in c(1:n_perm)) {
multif_perm_a <- abind(multif_perm_a, multif_perm[[i]])} # FRic & FDis
multif_perm_mean <- matrix(NA, ncol = 1, nrow= 2, dimnames = list(rownames(multif_perm_a), colnames(multif_perm_a))) # matrix to save mean values of FDis permutations
multif_perm_sd <- matrix(NA, ncol = 1, nrow= 2, dimnames = list(rownames(multif_perm_a), colnames(multif_perm_a))) # matrix to save sd values of FDis permutations
for (i in 1:2) {
for (j in "fdis") {
multif_perm_mean[i,j] = mean(multif_perm_a[i,j,])
multif_perm_sd[i,j] = sd(multif_perm_a[i,j,])
}
} # mean and sd values of FDis permutations
#### SES ####
ses_multif <- (func_ind_sp$functional_diversity_indices[,c("fdis")] - multif_perm_mean) / multif_perm_sd # SES functional multidimensional alpha diversity indices
sp_comm_nm <- as.data.frame(cetacean_dataset[,c(19:20)], row.names=cetacean_dataset$species_name)# species occurrence data for PCEEZ without migration
sp_traits_nm <- as.data.frame(cetacean_dataset[,c(3:6, 8:10)], row.names = cetacean_dataset$species_name) #species level trait data without migration
trait_info_nm <- data.frame(trait_name = colnames(sp_traits[,c(1:7)]), trait_type = c("O","O","O","N","O","O","N")) #trait information data frame without migration
sp_traits_nm$max_length_m <- ordered(sp_traits$max_length_m, levels=c("A", "B"))
sp_traits_nm$max_mass_kg <- ordered(sp_traits$max_mass_kg, levels=c("A","B","C","D"))
sp_traits_nm$max_mass_max_length_ratio <- ordered(sp_traits$max_mass_max_length_ratio, levels=c("A", "B", "C"))
sp_traits_nm$dentition <- as.factor(sp_traits$dentition)
sp_traits_nm$max_diving_depth <- ordered(sp_traits$max_diving_depth, levels=c("A", "B", "C", "D"))
sp_traits_nm$group_size <- ordered(sp_traits$group_size, levels = c("A", "B", "C", "D", "E", "F"))
sp_traits_nm$prey_choice <- as.factor(sp_traits$prey_choice) #setting up species traits as ordinal and nominal variables
#### Establishing Gower's Functional Distance between species ####
func_dist_sp_nm <- funct.dist(sp_traits,
tr_cat = trait_info,
metric = "gower",
ordinal_var = "metric",
weight_type = "equal") # Functional dissimilarity (Gower) distance between species
#### PCoA construction ####
func_qual_nm <- quality.fspaces(func_dist_sp,
deviation_weighting = c("absolute", "squared"),
maxdim_pcoa = 9,
fdist_scaling = c(TRUE, FALSE)) # estimating the quality of the functional space
apply(func_qual_nm$quality_fspaces, 2, which.min) # best number of dimesions calculated with MAD index (3D) (Maire et al. 2015)
#### Establishing Gower's Functional Distance between species ####
func_dist_sp_nm <- funct.dist(sp_traits_nm,
tr_cat = trait_info_nm,
metric = "gower",
ordinal_var = "metric",
weight_type = "equal") # Functional dissimilarity (Gower) distance between species
View(sp_traits_nm)
View(trait_info_nm)
trait_info_nm <- data.frame(trait_name = colnames(sp_traits_nm[,c(1:7)]), trait_type = c("O","O","O","N","O","O","N")) #trait information data frame without migration
sp_traits_nm$max_length_m <- ordered(sp_traits$max_length_m, levels=c("A", "B"))
sp_traits_nm$max_mass_kg <- ordered(sp_traits$max_mass_kg, levels=c("A","B","C","D"))
sp_traits_nm$max_mass_max_length_ratio <- ordered(sp_traits$max_mass_max_length_ratio, levels=c("A", "B", "C"))
sp_traits_nm$dentition <- as.factor(sp_traits$dentition)
sp_traits_nm$max_diving_depth <- ordered(sp_traits$max_diving_depth, levels=c("A", "B", "C", "D"))
sp_traits_nm$group_size <- ordered(sp_traits$group_size, levels = c("A", "B", "C", "D", "E", "F"))
sp_traits_nm$prey_choice <- as.factor(sp_traits$prey_choice) #setting up species traits as ordinal and nominal variables
#### Establishing Gower's Functional Distance between species ####
func_dist_sp_nm <- funct.dist(sp_traits_nm,
tr_cat = trait_info_nm,
metric = "gower",
ordinal_var = "metric",
weight_type = "equal") # Functional dissimilarity (Gower) distance between species
#### PCoA construction ####
func_qual_nm <- quality.fspaces(func_dist_sp_nm,
deviation_weighting = c("absolute", "squared"),
maxdim_pcoa = 9,
fdist_scaling = c(TRUE, FALSE)) # estimating the quality of the functional space
apply(func_qual_nm$quality_fspaces, 2, which.min) # best number of dimesions calculated with MAD index (3D) (Maire et al. 2015)
sp_faxes_nm <- func_qual_nm$details_fspaces$sp_pc_coord # species coordinates in the functional space
sp_comm_biog_nm = as.matrix(sp_comm_nm) # create matrix with species classified based on occurrence in the PCEEZ
sp_comm_biog_nm <- decostand(sp_comm_biog_nm, "pa") # presence/abscense transformation (1/0)
sp_comm_biog_nm<-(t(sp_comm_biog_nm)) #transpose matrix for use in the alpha.fd.multidim function
####Calculation of PCEEZ Functional Dispersion (and other indices)####
func_ind_sp_nm <- alpha.fd.multidim(sp_faxes_coord = sp_faxes_nm[,c(1:3)],
asb_sp_w = sp_comm_biog_nm,
scaling = TRUE,
details_returned = T,
verbose = T) # mutidimensinal functional diversity indices in a 3D functional space
func_ind_fdis_nm <- func_ind_sp_nm$functional_diversity_indices$fdis # functional dispersion without migration trait
#### Unique Trait Combinations ####
func_ent_nm <- sp.to.fe(sp_traits_nm, trait_info_nm, fe_nm_type = "fe_rank") # compute UTC
func_ind_fe_nm <- alpha.fd.fe(sp_comm_biog_nm, sp_to_fe = func_ent_nm) # compute UTC derived indices
View(func_ind_fe_nm$asb_fdfe) # UTC Functional indexes
sp_traits_unique_nm<-as.matrix(func_dist_sp_nm) #setting the functional dissimilarity data as a matrix
unique_sp_nm<-funrar(pres_matrix = sp_comm_biog_nm, dist_matrix = sp_traits_unique_nm, rel_abund = FALSE) #calculating the number of unique trait assemblages in the data set
uniqueness_nm<-uniqueness(sp_comm_biog_nm, sp_traits_unique_nm) #calculating "uniqueness" for each species in the data set
colSums(uniqueness_nm==0) ## XX species identified which had uniqueness=0, which means they shared trait assemblage with at least one other species
#### NULL Distribution Setup ####
n_perm = 1000 # number of permutations
multif_perm_nm <- as.list(rep(NA, n_perm)) # list to save permutations results of multidimensional functional alpha-diversity indices (FDis)
sp_perm_nm<-sp_comm_biog[c(1),]
for(i in seq(n_perm)){
sp_comm_n_nm = randomizeMatrix(sp_comm_biog_nm, null.model = "richness") # Randomizations maintaining species richness in the PCEEZ
multif_n_nm <- alpha.fd.multidim(sp_faxes_coord = sp_faxes_nm[,c(1:3)],
asb_sp_w = sp_comm_n_nm,
ind_vect= "fdis",
scaling = T,
details_returned = T,
verbose = F) #  Null Distribution for FDis
multif_perm_nm[[i]] <- multif_n_nm$functional_diversity_indices["fdis"] }# store null FDis results
#### Wrap Null Distribution Results ####
multif_perm_a_nm <- array(NA, dim = c(2,1,0)) # create an array with 1 col & 2 rows for null FDis results
for (i in c(1:n_perm)) {
multif_perm_a_nm <- abind(multif_perm_a_nm, multif_perm_nm[[i]])} # FRic & FDis
multif_perm_mean_nm <- matrix(NA, ncol = 1, nrow= 2, dimnames = list(rownames(multif_perm_a_nm), colnames(multif_perm_a_nm))) # matrix to save mean values of FDis permutations
multif_perm_sd_nm <- matrix(NA, ncol = 1, nrow= 2, dimnames = list(rownames(multif_perm_a_nm), colnames(multif_perm_a_nm))) # matrix to save sd values of FDis permutations
for (i in 1:2) {
for (j in "fdis") {
multif_perm_mean_nm[i,j] = mean(multif_perm_a_nm[i,j,])
multif_perm_sd_nm[i,j] = sd(multif_perm_a_nm[i,j,])
}
} # mean and sd values of FDis permutations
#### SES ####
ses_multif_nm <- (func_ind_sp_nm$functional_diversity_indices[,c("fdis")] - multif_perm_mean_nm) / multif_perm_sd_nm # SES functional multidimensional alpha diversity indices
View(ses_multif_nm)
#### NULL Distribution Setup ####
n_perm = 1000 # number of permutations
multif_perm <- as.list(rep(NA, n_perm)) # list to save permutations results of multidimensional functional alpha-diversity indices (FDis)
n_perm
multif_perm
for(i in seq(n_perm)){
sp_comm_n = randomizeMatrix(sp_comm_biog, null.model = "richness") # Randomizations maintaining species richness in the PCEEZ
multif_n <- alpha.fd.multidim(sp_faxes_coord = sp_faxes[,c(1:4)],
asb_sp_w = sp_comm_n,
ind_vect= "fdis",
scaling = T,
details_returned = T,
verbose = F) #  Null Distribution for FDis
multif_perm[[i]] <- multif_n$functional_diversity_indices["fdis"] }# store null FDis results
#### Wrap Null Distribution Results ####
multif_perm_a <- array(NA, dim = c(2,1,0)) # create an array with 1 col & 2 rows for null FDis results
for (i in c(1:n_perm)) {
multif_perm_a <- abind(multif_perm_a, multif_perm[[i]])} # FDis
multif_perm_a
sp_comm_biog
multif_perm_mean <- matrix(NA, ncol = 1, nrow= 2, dimnames = list(rownames(multif_perm_a), colnames(multif_perm_a))) # matrix to save mean values of FDis permutations
multif_perm_sd <- matrix(NA, ncol = 1, nrow= 2, dimnames = list(rownames(multif_perm_a), colnames(multif_perm_a))) # matrix to save sd values of FDis permutations
for (i in 1:2) {
for (j in "fdis") {
multif_perm_mean[i,j] = mean(multif_perm_a[i,j,])
multif_perm_sd[i,j] = sd(multif_perm_a[i,j,])
}
} # mean and sd values of FDis permutations
#### SES ####
ses_multif <- (func_ind_sp$functional_diversity_indices[,c("fdis")] - multif_perm_mean) / multif_perm_sd # SES functional multidimensional alpha diversity indices
ses_multif
help(randomizeMatrix)
help("randomizeMatrix")
#### Load R packages ####
library("mFD") # functional trait analyses
library("vegan") # species diversity analyses
library("betapart") # functional B-diversity
library("picante") # null models
library("abind") # arrays
cetacean_dataset<- read.csv("mtuck_honours_Rdocument.csv") # Import cleaned csv dataset for Cetacean functional diversity
